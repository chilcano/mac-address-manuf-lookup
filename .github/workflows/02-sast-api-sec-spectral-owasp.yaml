name: 02-sast-api-sec-spectral-owasp

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - 'master'
  #     - 'main'
  #   paths-ignore:
  #     - '.gitignore'
      #- '.github/**' 

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  spectral-owasp:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set myvars
        id: myvars
        run: |
          branchname=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-' )
          fullnumericdate=$(date +%Y%m%d%H%M%S)
          githashshort=$(git rev-parse --short HEAD)
          echo "GIT_HASH_SHORT=$githashshort" >> $GITHUB_OUTPUT
          echo "DATE_FULL=$fullnumericdate" >> $GITHUB_OUTPUT
          if [ "$branchname" = "develop" ]; then
            echo "CURRENT_ENVIRONMENT=development" >> $GITHUB_OUTPUT
            echo "SHORT_ENV_OUT=DEV" >> $GITHUB_OUTPUT
          elif [ "$branchname" = "main" ] || [ "$branchname" = "master" ]; then
            echo "CURRENT_ENVIRONMENT=production" >> $GITHUB_OUTPUT
            echo "SHORT_ENV_OUT=PROD" >> $GITHUB_OUTPUT
          else
            branchname='test'
            echo "CURRENT_ENVIRONMENT=testing" >> $GITHUB_OUTPUT
            echo "SHORT_ENV_OUT=TEST" >> $GITHUB_OUTPUT
          fi
          echo "BRANCH_NAME=$branchname" >> $GITHUB_OUTPUT

      - name: Install Spectral and initial rulesets
        run: |
          npm install @stoplight/spectral-cli
          npm install @stoplight/spectral-owasp-ruleset

      - name: Install Spectral-Sarif converter
        run: |
          git clone --branch fix-level-attribute https://github.com/chilcano/spectral-sarif
          cd spectral-sarif
          npm install
          npm run build
          npx spectral-sarif --version

      - name: Setup OWASP APISec Spectral rulesets
        run: |
          echo 'extends: ["@stoplight/spectral-owasp-ruleset"]' > .spectral_owasp.yaml

      - name: Setup Python env
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Generate the OpenAPI spec file
        run: |
          cd src/python
          pip install -r requirements.txt
          flask --app mac_manuf_api_rest_https.py spec > openapi.yaml
      
      - name: Run Spectral CLI
        if: ${{ success() }} || ${{ failure() }}
        run: |
          set -o pipefail
          npx spectral lint src/python/openapi.yaml -r .spectral_owasp.yaml \
          -f junit -o.junit report_spectral_owasp.junit \
          -f json -o.json report_spectral_owasp.json \
          -f html -o.html report_spectral_owasp.html \
          -f github-actions -o.github-actions report_spectral_owasp.gha --verbose
          set +o pipefail

      - name: Convert Spectral Json report to Sarif
        if: ${{ success() }} || ${{ failure() }}
        run: |
          cd spectral-sarif/
          npx spectral-sarif ../report_spectral_owasp.json -o ../report_spectral_owasp.sarif -r ${{ github.workspace }}/

      - name: Upload Spectral reports as GH Artifact
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: spectral-reports-${{ steps.myvars.outputs.DATE_FULL }}
          path: report_*.*

      - name: Load Spectral Sarif report to Github Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: report_spectral_owasp.sarif
          category: spectral-owasp-apisec
